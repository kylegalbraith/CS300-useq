## Kyle Galbraith - CL3 & CL4 - Pseudocode

I am only really concerned about the new functionality being added, so my pseudocode only addresses new functionality that is going to be added.

If argument == -F or --format-word
	If equal width and format flags have not been seen
		If argument length == length of --format-word or -F
			Look at the next argument on the command line
			If next argument matches a string
				Check that the next argument is either
				'alpha','ALPHA','roman','ROMAN','floating', 'arabic'
				If it is not a valid format, output an ERROR.
			Else
				Set formatWord to ""
				Step back one argument on the command line
			Set formatWord to true (i.e. seen it)
		Else
			Parse the flag so we grab everything behind the equals sign
			If the argument matches a string
				Check that the argument is either
				'alpha','ALPHA','roman','ROMAN','floating', 'arabic'
				If it is not a valid format, output an ERROR.
			Else
				Set formatWord to ""
			Set formatWord to true (i.e. seen it)
	Else
		Output an Error that format word cannot be used with equal 					width and format

If formatWord == "" and formatWord is False
	Do our normal calculations that were implemented in previous compliance levels
Else
	Loop through the remaning arguments and push them onto an array, numbers.
	If the length of numbers = 3
		Check the format of the start value using regex
		Check the format of the increment value using regex
		Check the format of the end value using regex

		If formatWord is the emptystring
			Set the format to be the format of the end argument

		If formatWord is alpha or ALPHA
			If increment format is arabic
				If start format == formatWord and end format == formatWord
					Convert the start value to a number
					Assign it to startValue of sequ obj
					Assign the increment argument to the sequ obj
					Convert the end value to a number
					Assign it to the endValue of sequ obj
				Else
					Output error that an operand is not in correct 							format
			Else
				Output error that when using alpha the increment arg must 					be of type arabic
		If formatWord is roman or ROMAN
			If startFormat = roman or arabic and incrementFormat = roman or
			arabic and endFormat = roman or arabic
				If startFormat = arabic
					If start > 0 
						Assign startValue on sequ obj
					Else
						Output error that you cannot use negative arabic with roman numberals
				Else
					Convert the startValue from roman to number
					Assign startValue on sequ obj
				
				If incrementFormat = arabic
					If increment > 0
						Assign step on sequ obj
					Else 
						Output error that you cannot use negative arabic with roman numberals
					
				Else
					Convert the step from roman to number
					Assign step on sequ obj

				If endFormat = arabic
					If end > 0
						Assign endValue on sequ obj
					Else
						Output error that you cannot use negative arabic with roman numberals
				Else
					Convert endValue from roman to number
					Assign the endValue on sequ obj
			Else
				Output error that an operand is not in correct format
		If formatWord is arabic
			If start, step, and end are arabic as well
				Assign start value on sequ obj
				Assign step value on sequ obj
				Assign end value on sequ obj
			Else
				Output error that an operand is not in correct format
		If formatWord is floating 	
			If start, step, and end are floating as well
				Assign start value on sequ obj
				Assign step value on sequ obj
				Assign end value on sequ obj
			Else
				Output error that an operand is not in correct format

	If the length of numbers = 2
		Do the same checks as above only deal with start and end value
	If the length of numbers = 1
		Do the same checks as above only deal with end value

If formatWord is True
	If formatWord is alpha
		Output from start to end on increment steps
		Convert each number to a word
	If formatWord is roman
		Output from start to end on increment steps
		Convert each number to a roman numeral
	If formatWord is arabic or floating
		Do our normal output from CL1 and CL2


###### CL4 Pseudo ######
If argument == --number-lines or -n
